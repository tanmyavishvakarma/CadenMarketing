{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tanmy\\\\Downloads\\\\dice-roll-forked\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tanmy\\\\Downloads\\\\dice-roll-forked\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport RNG from './rng';\nimport RNGFactory from './rng-factory';\nimport uniform from './distributions/uniform';\nimport uniformInt from './distributions/uniform-int';\nimport uniformBoolean from './distributions/uniform-boolean';\nimport normal from './distributions/normal';\nimport logNormal from './distributions/log-normal';\nimport bernoulli from './distributions/bernoulli';\nimport binomial from './distributions/binomial';\nimport geometric from './distributions/geometric';\nimport poisson from './distributions/poisson';\nimport exponential from './distributions/exponential';\nimport irwinHall from './distributions/irwin-hall';\nimport bates from './distributions/bates';\nimport pareto from './distributions/pareto';\nimport RNGMathRandom from './generators/math-random';\nexport { RNG, RNGFactory };\n/**\n * Seedable random number generator supporting many common distributions.\n *\n * Defaults to Math.random as its underlying pseudorandom number generator.\n *\n * @name Random\n * @class\n *\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\n */\n\nexport var Random = /*#__PURE__*/function () {\n  function Random(rng) {\n    var _this = this;\n\n    _classCallCheck(this, Random);\n\n    this._cache = {}; // --------------------------------------------------------------------------\n    // Uniform utility functions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Convenience wrapper around `this.rng.next()`\n     *\n     * Returns a floating point number in [0, 1).\n     *\n     * @return {number}\n     */\n\n    this.next = function () {\n      return _this._rng.next();\n    };\n    /**\n     * Samples a uniform random floating point number, optionally specifying\n     * lower and upper bounds.\n     *\n     * Convence wrapper around `random.uniform()`\n     *\n     * @param {number} [min=0] - Lower bound (float, inclusive)\n     * @param {number} [max=1] - Upper bound (float, exclusive)\n     * @return {number}\n     */\n\n\n    this.float = function (min, max) {\n      return _this.uniform(min, max)();\n    };\n    /**\n     * Samples a uniform random integer, optionally specifying lower and upper\n     * bounds.\n     *\n     * Convence wrapper around `random.uniformInt()`\n     *\n     * @param {number} [min=0] - Lower bound (integer, inclusive)\n     * @param {number} [max=1] - Upper bound (integer, inclusive)\n     * @return {number}\n     */\n\n\n    this.int = function (min, max) {\n      return _this.uniformInt(min, max)();\n    };\n    /**\n     * Samples a uniform random integer, optionally specifying lower and upper\n     * bounds.\n     *\n     * Convence wrapper around `random.uniformInt()`\n     *\n     * @alias `random.int`\n     *\n     * @param {number} [min=0] - Lower bound (integer, inclusive)\n     * @param {number} [max=1] - Upper bound (integer, inclusive)\n     * @return {number}\n     */\n\n\n    this.integer = function (min, max) {\n      return _this.uniformInt(min, max)();\n    };\n    /**\n     * Samples a uniform random boolean value.\n     *\n     * Convence wrapper around `random.uniformBoolean()`\n     *\n     * @alias `random.boolean`\n     *\n     * @return {boolean}\n     */\n\n\n    this.bool = function () {\n      return _this.uniformBoolean()();\n    };\n    /**\n     * Samples a uniform random boolean value.\n     *\n     * Convence wrapper around `random.uniformBoolean()`\n     *\n     * @return {boolean}\n     */\n\n\n    this.boolean = function () {\n      return _this.uniformBoolean()();\n    }; // --------------------------------------------------------------------------\n    // Uniform distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\n     *\n     * @param {number} [min=0] - Lower bound (float, inclusive)\n     * @param {number} [max=1] - Upper bound (float, exclusive)\n     * @return {function}\n     */\n\n\n    this.uniform = function (min, max) {\n      return _this._memoize('uniform', uniform, min, max);\n    };\n    /**\n     * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n     *\n     * @param {number} [min=0] - Lower bound (integer, inclusive)\n     * @param {number} [max=1] - Upper bound (integer, inclusive)\n     * @return {function}\n     */\n\n\n    this.uniformInt = function (min, max) {\n      return _this._memoize('uniformInt', uniformInt, min, max);\n    };\n    /**\n     * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution),\n     * with two possible outcomes, `true` or `false.\n     *\n     * This method is analogous to flipping a coin.\n     *\n     * @return {function}\n     */\n\n\n    this.uniformBoolean = function () {\n      return _this._memoize('uniformBoolean', uniformBoolean);\n    }; // --------------------------------------------------------------------------\n    // Normal distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates a [Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n     *\n     * @param {number} [mu=0] - Mean\n     * @param {number} [sigma=1] - Standard deviation\n     * @return {function}\n     */\n\n\n    this.normal = function (mu, sigma) {\n      return normal(_this, mu, sigma);\n    };\n    /**\n     * Generates a [Log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).\n     *\n     * @param {number} [mu=0] - Mean of underlying normal distribution\n     * @param {number} [sigma=1] - Standard deviation of underlying normal distribution\n     * @return {function}\n     */\n\n\n    this.logNormal = function (mu, sigma) {\n      return logNormal(_this, mu, sigma);\n    }; // --------------------------------------------------------------------------\n    // Bernoulli distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).\n     *\n     * @param {number} [p=0.5] - Success probability of each trial.\n     * @return {function}\n     */\n\n\n    this.bernoulli = function (p) {\n      return bernoulli(_this, p);\n    };\n    /**\n     * Generates a [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).\n     *\n     * @param {number} [n=1] - Number of trials.\n     * @param {number} [p=0.5] - Success probability of each trial.\n     * @return {function}\n     */\n\n\n    this.binomial = function (n, p) {\n      return binomial(_this, n, p);\n    };\n    /**\n     * Generates a [Geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution).\n     *\n     * @param {number} [p=0.5] - Success probability of each trial.\n     * @return {function}\n     */\n\n\n    this.geometric = function (p) {\n      return geometric(_this, p);\n    }; // --------------------------------------------------------------------------\n    // Poisson distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution).\n     *\n     * @param {number} [lambda=1] - Mean (lambda > 0)\n     * @return {function}\n     */\n\n\n    this.poisson = function (lambda) {\n      return poisson(_this, lambda);\n    };\n    /**\n     * Generates an [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).\n     *\n     * @param {number} [lambda=1] - Inverse mean (lambda > 0)\n     * @return {function}\n     */\n\n\n    this.exponential = function (lambda) {\n      return exponential(_this, lambda);\n    }; // --------------------------------------------------------------------------\n    // Misc distributions\n    // --------------------------------------------------------------------------\n\n    /**\n     * Generates an [Irwin Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution).\n     *\n     * @param {number} [n=1] - Number of uniform samples to sum (n >= 0)\n     * @return {function}\n     */\n\n\n    this.irwinHall = function (n) {\n      return irwinHall(_this, n);\n    };\n    /**\n     * Generates a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution).\n     *\n     * @param {number} [n=1] - Number of uniform samples to average (n >= 1)\n     * @return {function}\n     */\n\n\n    this.bates = function (n) {\n      return bates(_this, n);\n    };\n    /**\n     * Generates a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution).\n     *\n     * @param {number} [alpha=1] - Alpha\n     * @return {function}\n     */\n\n\n    this.pareto = function (alpha) {\n      return pareto(_this, alpha);\n    };\n\n    if (rng && rng instanceof RNG) {\n      this.use(rng);\n    } else {\n      this.use(new RNGMathRandom());\n    }\n\n    this._cache = {};\n  }\n  /**\n   * @member {RNG} Underlying pseudo-random number generator\n   */\n\n\n  _createClass(Random, [{\n    key: \"rng\",\n    get: function get() {\n      return this._rng;\n    }\n    /**\n     * Creates a new `Random` instance, optionally specifying parameters to\n     * set a new seed.\n     *\n     * @see RNG.clone\n     *\n     * @param {string} [seed] - Optional seed for new RNG.\n     * @param {object} [opts] - Optional config for new RNG options.\n     * @return {Random}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      if (arguments.length) {\n        return new Random(RNGFactory.apply(void 0, arguments));\n      } else {\n        return new Random(this.rng.clone());\n      }\n    }\n    /**\n     * Sets the underlying pseudorandom number generator used via\n     * either an instance of `seedrandom`, a custom instance of RNG\n     * (for PRNG plugins), or a string specifying the PRNG to use\n     * along with an optional `seed` and `opts` to initialize the\n     * RNG.\n     *\n     * @example\n     * const random = require('random')\n     *\n     * random.use('example_seedrandom_string')\n     * // or\n     * random.use(seedrandom('kittens'))\n     * // or\n     * random.use(Math.random)\n     *\n     * @param {...*} args\n     */\n\n  }, {\n    key: \"use\",\n    value: function use() {\n      this._rng = RNGFactory.apply(void 0, arguments);\n    }\n    /**\n     * Patches `Math.random` with this Random instance's PRNG.\n     */\n\n  }, {\n    key: \"patch\",\n    value: function patch() {\n      if (this._patch) {\n        throw new Error('Math.random already patched');\n      }\n\n      this._patch = Math.random;\n      Math.random = this.uniform();\n    }\n    /**\n     * Restores a previously patched `Math.random` to its original value.\n     */\n\n  }, {\n    key: \"unpatch\",\n    value: function unpatch() {\n      if (this._patch) {\n        Math.random = this._patch;\n        delete this._patch;\n      }\n    } // --------------------------------------------------------------------------\n    // Internal\n    // --------------------------------------------------------------------------\n\n    /**\n     * Memoizes distributions to ensure they're only created when necessary.\n     *\n     * Returns a thunk which that returns independent, identically distributed\n     * samples from the specified distribution.\n     *\n     * @private\n     *\n     * @param {string} label - Name of distribution\n     * @param {function} getter - Function which generates a new distribution\n     * @param {...*} args - Distribution-specific arguments\n     *\n     * @return {function}\n     */\n\n  }, {\n    key: \"_memoize\",\n    value: function _memoize(label, getter) {\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      var key = \"\".concat(args.join(';'));\n      var value = this._cache[label];\n\n      if (value === undefined || value.key !== key) {\n        value = {\n          key: key,\n          distribution: getter.apply(void 0, [this].concat(args))\n        };\n        this._cache[label] = value;\n      }\n\n      return value.distribution;\n    }\n  }]);\n\n  return Random;\n}(); // defaults to Math.random as its RNG\n\nexport default new Random();","map":null,"metadata":{},"sourceType":"module"}